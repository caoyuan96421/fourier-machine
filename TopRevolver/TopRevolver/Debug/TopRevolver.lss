
TopRevolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000c0  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000117  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d1  00000000  00000000  00000227  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013b  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018d  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000050  00000000  00000000  000005e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000635  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	1b c0       	rjmp	.+54     	; 0x68 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/pgmspace.h>
int main(void)
{
	DDRA |= _BV(PA0) | _BV(PA2) | _BV(PA3);
  34:	8a b3       	in	r24, 0x1a	; 26
  36:	8d 60       	ori	r24, 0x0D	; 13
  38:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0;
  3a:	1b ba       	out	0x1b, r1	; 27

#include <avr/io.h>
#include <util/delay.h>
#include <avr/pgmspace.h>
int main(void)
{
  3c:	68 ec       	ldi	r22, 0xC8	; 200
  3e:	50 e0       	ldi	r21, 0x00	; 0
	PORTA = 0;
	int counter = 0;
    while(1)
    {
        _delay_ms(5);
		PORTA ^= _BV(PA2);
  40:	34 e0       	ldi	r19, 0x04	; 4
		if(++counter == 200){
			counter = 0;
			PORTA ^= _BV(PA0);
  42:	41 e0       	ldi	r20, 0x01	; 1

#include <avr/io.h>
#include <util/delay.h>
#include <avr/pgmspace.h>
int main(void)
{
  44:	86 2f       	mov	r24, r22
  46:	95 2f       	mov	r25, r21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  48:	ef e0       	ldi	r30, 0x0F	; 15
  4a:	f7 e2       	ldi	r31, 0x27	; 39
  4c:	31 97       	sbiw	r30, 0x01	; 1
  4e:	f1 f7       	brne	.-4      	; 0x4c <__SREG__+0xd>
  50:	00 c0       	rjmp	.+0      	; 0x52 <__SREG__+0x13>
  52:	00 00       	nop
	PORTA = 0;
	int counter = 0;
    while(1)
    {
        _delay_ms(5);
		PORTA ^= _BV(PA2);
  54:	2b b3       	in	r18, 0x1b	; 27
  56:	23 27       	eor	r18, r19
  58:	2b bb       	out	0x1b, r18	; 27
  5a:	01 97       	sbiw	r24, 0x01	; 1
		if(++counter == 200){
  5c:	00 97       	sbiw	r24, 0x00	; 0
  5e:	a1 f7       	brne	.-24     	; 0x48 <__SREG__+0x9>
			counter = 0;
			PORTA ^= _BV(PA0);
  60:	8b b3       	in	r24, 0x1b	; 27
  62:	84 27       	eor	r24, r20
  64:	8b bb       	out	0x1b, r24	; 27
  66:	ee cf       	rjmp	.-36     	; 0x44 <__SREG__+0x5>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>
